name: patient-record-service CI/CD Flow

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  DOCKER_REGISTRY: gcr.io
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID_VALUE }}
  K8S_CLUSTER_NAME: health-sync
  K8S_CLUSTER_ZONE: us-central1
  K8S_NAMESPACE: health-sync
  APPLICATION_NAME: patient-record-service
  DOCKER_IMAGE_TAG: prod
  K8S_DEPLOYMENT_FILE: deployment.yaml
  K8S_SERVICE_FILE: service.yaml

jobs:
  ci-cd-pipeline:
    name: CI/CD Pipeline
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      # Step 3: Install Dependencies
      - name: Install Dependencies
        run: npm install

      # Step 4: Run Tests
      - name: Run Tests
        run: |
          echo "Running Tests..."
          npm test || echo "No tests specified, skipping..."

      # Step 5: Build Docker Image
      - name: Build Docker Image
        run: |
          docker build -t "${{ env.DOCKER_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/${{ env.APPLICATION_NAME }}:${{ env.DOCKER_IMAGE_TAG }}" .

      # Step 6: Authenticate with Google Cloud
      - name: Setup Google Cloud CLI
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@0.1.3
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
        with:
          service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY_JSON }}
          project_id: ${{ secrets.GCP_PROJECT_ID_VALUE }}

      # Step 7: Configure Docker for GKE
      - name: Configure Docker for GKE
        run: gcloud auth configure-docker --quiet

      # Step 8: Push Docker Image to GCR
      - name: Push Docker Image to GCR
        run: |
          docker push "${{ env.DOCKER_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/${{ env.APPLICATION_NAME }}:${{ env.DOCKER_IMAGE_TAG }}"

      # Step 9: Get GKE Cluster Credentials
      - name: Get Cluster Credentials
        run: gcloud container clusters get-credentials "${{ env.K8S_CLUSTER_NAME }}" --zone "${{ env.K8S_CLUSTER_ZONE }}" --project "${{ secrets.GCP_PROJECT_ID }}"

      # Step 10: Deploy to GKE
      - name: Deploy to GKE
        run: |
          kubectl apply -f ${{ env.K8S_SERVICE_FILE }} -n "${{ env.K8S_NAMESPACE }}"
          kubectl apply -f ${{ env.K8S_DEPLOYMENT_FILE }} -n "${{ env.K8S_NAMESPACE }}"
          kubectl rollout restart deployment "${{ env.APPLICATION_NAME }}" -n "${{ env.K8S_NAMESPACE }}"
          kubectl get services -o wide -n "${{ env.K8S_NAMESPACE }}"

      # Step 11: Deployment Health Check
#      - name: Deployment Integration Tests
#        run: |
#          echo "Running Service Health Check Test..."
#          curl --fail "http://localhost:8080/api/${{ env.APPLICATION_NAME }}/health" || exit 1
